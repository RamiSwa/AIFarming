"""
Django settings for farming_ai project.

Generated by 'django-admin startproject' using Django 5.0.11.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from decouple import config



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

SECRET_KEY = config('SECRET_KEY')  # Moved to .env
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='127.0.0.1,localhost').split(',')

FRONTEND_URL = "http://127.0.0.1:8000"  # Change this to your frontend domain if needed


# Application definition

INSTALLED_APPS = [
    'jazzmin',  # ✅ Modern UI for Django Admin
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 2FA

    # <- if you want phone number capability.

    # preventing brute-force attacks
    'axes',
    'defender',
    
    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken',  # Enable Token Authentication
    'corsheaders',
    'django_celery_results',
    
    
    # Custom Apps
    'accounts',
    'weather',
    'soil',
    'recommendations',
    'pages',
    'monetization',    
    'honeypot_admin',  
]



REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',  # ✅ Uses Django session cookies
        'rest_framework.authentication.TokenAuthentication',  # ✅ API Token Authentication
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',  # ✅ Requires login for API access
    ),
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    # CORS Middleware (should be near the top)
    'corsheaders.middleware.CorsMiddleware',
    'axes.middleware.AxesMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',

    
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "farming_ai.middleware.RestrictAdminAccessMiddleware",  # ✅ Ensure correct path
]



# ✅ Use database-backed session storage
SESSION_ENGINE = "django.contrib.sessions.backends.db"  

# ✅ Cookie Settings
SESSION_COOKIE_NAME = "sessionid"  # Standard session cookie name
SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=True, cast=bool)
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # ✅ Forces logout when browser closes
SESSION_COOKIE_HTTPONLY = True  # ✅ Prevents JavaScript from accessing session cookies

# ✅ CSRF Settings (Important)
CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=True, cast=bool)
CSRF_COOKIE_HTTPONLY = False


# ✅ CORS Configuration
# ✅ Allow X-Auth-Token in responses
CORS_ALLOW_HEADERS = [
    'authorization',
    'content-type',
    'x-auth-token',  # ✅ Explicitly allow the custom header
    'x-requested-with',
    'accept',
]

# ✅ Enable CORS for your frontend (Adjust as needed)
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='http://127.0.0.1:8000').split(',')


# ✅ Allow X-Auth-Token in Django's security headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True


ROOT_URLCONF = 'farming_ai.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'farming_ai.wsgi.application'

AUTH_USER_MODEL = 'accounts.User'

# Axes Configuration (Brute-force protection)
AXES_FAILURE_LIMIT = 5  # Lockout after 5 failed attempts
AXES_COOLOFF_TIME = 30  # Allow retry after 30 minutes
AXES_RESET_ON_SUCCESS = True  # ✅ Reset failure count after a successful login
AXES_LOCKOUT_PARAMETERS = ["username", "ip_address"]  # ✅ Track by username + IP



# Defender Configuration (Another layer of brute-force protection)
DEFENDER_LOGIN_FAILURE_LIMIT = 5
DEFENDER_COOLOFF_TIME = 60  # 1 hour lockout

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesStandaloneBackend',  # ✅ Required for django-axes
    'django.contrib.auth.backends.ModelBackend',  # ✅ Default Django authentication backend
]

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('POSTGRES_DB'),
        'USER': config('POSTGRES_USER'),
        'PASSWORD': config('POSTGRES_PASSWORD'),
        'HOST': config('POSTGRES_HOST'),
        'PORT': config('POSTGRES_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 8},

    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # For additional static files (optional)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # For production use


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.DEBUG: 'secondary',  # Maps DEBUG level to Bootstrap's 'alert-secondary'
    messages.INFO: 'info',        # Maps INFO level to 'alert-info'
    messages.SUCCESS: 'success',  # Maps SUCCESS level to 'alert-success'
    messages.WARNING: 'warning',  # Maps WARNING level to 'alert-warning'
    messages.ERROR: 'danger',     # Maps ERROR level to 'alert-danger'
}

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# SMTP configuration
# SMTP configuration
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT', cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)

# Email credentials
EMAIL_HOST_USER = config('EMAIL_HOST_USER')  # your email address
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')  # your app-specific password

# Email recipient for contact notifications (set this in your .env file)
CONTACT_NOTIFICATION_EMAIL = config('CONTACT_NOTIFICATION_EMAIL', default='info@ramireviews.com')


# Path to the trained models directory
TRAINED_MODELS_DIR = os.path.join(BASE_DIR, "trained_models")

# OpenCage API Key
OPENCAGE_API_KEY = config("OPENCAGE_API_KEY", default="")
# Celery settings
# Celery Configuration
CELERY_BROKER_URL = "redis://cache:6379/0"  # Use Redis as the broker
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_BACKEND = "django-db"






# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'root': {
#         'handlers': ['console'],
#         'level': 'INFO',
#     },
# }

# Ensure Django Admin uses 2FA login separately
# Regular users login/logout
# Regular users login/logout
LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/accounts/dashboard/"
LOGOUT_REDIRECT_URL = "/accounts/login/"


# Admin panel login/logout (with 2FA)


# Ensure admins are redirected correctly
AXES_LOCKOUT_TEMPLATE = "admin/lockout.html"  # Custom lockout page (if needed)



JAZZMIN_SETTINGS = {
    "site_title": "AI Farming Dashboard",
    "site_header": "AI Farming Admin",
    "site_brand": "AI Farming",
    "welcome_sign": "Welcome to AI Farming Admin Panel",
    "site_logo": "images/logo_AI_Farming_round.png",  # ✅ Upload logo in static/images/
    "site_icon": "images/favicon.ico",  # ✅ Change browser tab icon
    "navigation_expanded": False,  # ✅ Sidebar starts collapsed
    "theme": "darkly",  # ✅ Options: "darkly", "cosmo", "flatly", "lux"
    "show_ui_builder": True,  # ✅ Enables UI customization
    "navigation_expanded": False,  # ✅ Collapsible sidebar
    "topmenu_links": [
        {"name": "Home", "url": "admin:index", "permissions": ["auth.view_user"]},
    ],
}


JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_fixed": True,
    "actions_sticky_top": True,  # ✅ Keep action buttons visible
    "body_small_text": False,  # ✅ Improve readability
    "sidebar_fixed": False,  # ✅ Allow sidebar to collapse properly
}


JAZZMIN_UI_TWEAKS["css_classes"] = {"body": "admin-custom"}

JAZZMIN_SETTINGS["custom_links"] = {
    "accounts": [
        {"name": "View Users", "url": "admin:accounts_user_changelist", "icon": "fas fa-user"},
        {"name": "Add User", "url": "admin:accounts_user_add", "icon": "fas fa-user-plus"},
    ],
    "orders": [
        {"name": "View Orders", "url": "admin:monetization_order_changelist", "icon": "fas fa-shopping-cart"},
    ],
}



SESSION_COOKIE_AGE = 1800  # ✅ Auto logout after 30 minutes
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

JAZZMIN_SETTINGS["topmenu_links"] += [
    {"name": "Monetization Dashboard", "url": "monetization_dashboard", "permissions": ["auth.view_user"]},
]


JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": True,
    "brand_small_text": False,
    "brand_colour": False,
    "accent": "accent-primary",
    "navbar": "navbar-navy navbar-dark",
    "no_navbar_border": False,
    "navbar_fixed": True,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": True,
    "sidebar": "sidebar-dark-primary",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "darkly",
    "dark_mode_theme": "darkly",
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    },
    "actions_sticky_top": False,
    "css_classes": {
        "body": "admin-custom"
    }
}
